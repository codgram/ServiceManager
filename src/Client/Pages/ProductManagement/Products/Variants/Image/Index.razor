@page "/{companySlug}/product/{productNo}/variant/{variantNo}/image"
@inject HttpClient client
@using ServiceManager.Client.Shared.PIM
@inject IJSRuntime JsRuntime
@inject Services.Style Style
@layout PIMLayout

<a href="@companySlug/product/@productNo/variant/@variantNo/image/create" class="btn btn-primary mb-2">Create</a>
<br />
@if (VariantImages == null || Product == null || Variant == null)
{
    <text>Loading...</text>
}
else if (VariantImages.Length == 0)
{
    <text>No Records Found</text>
}
else
{
    <div class="table-responsive shadow p-2 rounded bg-white">
    <table class="table table-striped table-sm">
        <thead>
            <tr>
                <th>Color</th>
                <th>URL</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (VariantImage image in VariantImages)
            {
                <tr>
                    <td>@image.Color</td>
                    <td>@image.ImageURL</td>
                    <td>
                        <div class="btn-group">
                          <button type="button" class="btn btn-danger dropdown-toggle" data-toggle="dropdown" aria-expanded="false">
                            Action
                          </button>
                          <ul class="dropdown-menu" style="height: @height;">
                            <li><a class="dropdown-item disabled" href="">Edit</a></li>                                                    
                            <li><a class="dropdown-item disabled" href="#">Details</a></li>
                            <li><hr class="dropdown-divider"></li>
                            <li><a class="dropdown-item disabled" @onclick="@(() => DeleteVariantImage(image.VariantImageId))" >Delete</a></li>
                          </ul>
                        </div>
                    </td>
                </tr>
            }

        </tbody>
    </table>
</div>
}


@code {
    [Parameter] public string companySlug { get; set; }
    [Parameter] public string productNo { get; set; }
    [Parameter] public string variantNo { get; set; }
    private string height { get; set; }

    private Company Company { get; set; }
    private VariantImage[] VariantImages { get; set; }
    private Product[] Products { get; set; }
    private Product Product { get; set; }

    private Variant[] Variants { get; set; }
    private Variant Variant { get; set; }

    protected override async Task OnInitializedAsync() {
        
        Company = await client.GetFromJsonAsync<Company>($"api/company/s?slug={companySlug}");
        CompanyFilter.CompanyId = Company.CompanyId;
        CompanyFilter.Slug = Company.Slug;

        Products = await client.GetFromJsonAsync<Product[]>($"api/product?companyId={Company.CompanyId}");
        Product = Products.FirstOrDefault(p => p.ProductNo == productNo);

        Variants = await client.GetFromJsonAsync<Variant[]>($"api/variant/{Product.ProductId}");
        Variant = Variants.FirstOrDefault(v => v.ProductId == Product.ProductId && v.VariantNo == variantNo);
        
        VariantImages = await client.GetFromJsonAsync<VariantImage[]>($"api/VariantImage/{Variant.VariantId}?productId={Variant.ProductId}");
        
        height = Style.GetHeight(VariantImages.Count());
            
    }

    private async Task DeleteVariantImage(string variantImageId) {
        VariantImage image = await client.GetFromJsonAsync<VariantImage>($"api/variantimage/{variantImageId}");
        if(await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to remove this image?")) {
                await client.DeleteAsync($"api/variantimage/{variantImageId}");
            }
        await OnInitializedAsync();
    }

}