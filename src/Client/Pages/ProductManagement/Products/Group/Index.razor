@page "/{companySlug}/product/group"
@inject HttpClient client
@using ServiceManager.Client.Shared.PIM
@layout PIMLayout
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject Services.Style Style


<a href="@companySlug/product/group/create" class="btn btn-primary mb-2">Create</a>
<br />
@if (productGroups == null)
{
    <text>Loading...</text>
}
else if (productGroups.Length == 0)
{
    <text>No Records Found</text>
}
else
{
    <div class="table-responsive p-2 rounded bg-white">
    <table class="table table-striped table-sm">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (ProductGroup productGroup in productGroups)
            {
                <tr>
                    <td>@productGroup.Name</td>
                    <td>@productGroup.Description</td>
                    <td>
                        <div class="btn-group">
                          <button type="button" class="btn btn-danger btn-sm dropdown-toggle" data-toggle="dropdown" aria-expanded="false">
                            Action
                          </button>
                          <ul class="dropdown-menu" style="height: @height;">
                            <li><a class="dropdown-item" href="@companySlug/product/group/edit/@productGroup.ProductGroupId">Edit</a></li>                                                    
                            <li><a class="dropdown-item disabled" href="#">Details</a></li>
                            <li><hr class="dropdown-divider"></li>
                            <li><a class="dropdown-item" @onclick="@(() => DeleteProductGroup(productGroup.ProductGroupId))">Delete</a></li>
                          </ul>
                        </div>
                    </td>
                </tr>
            }

        </tbody>
    </table>
    </div>

}



@code {
    [Parameter] public string companySlug { get; set; }
    private ProductGroup[] productGroups { get; set; }
    private Company Company { get; set; }
    private string height { get; set; }

    protected override async Task OnInitializedAsync() {
        
        Company = await client.GetFromJsonAsync<Company>($"api/company/s?slug={companySlug}");
        CompanyFilter.CompanyId = Company.CompanyId;
        CompanyFilter.Slug = Company.Slug;
        productGroups = await client.GetFromJsonAsync<ProductGroup[]>($"api/productgroup?companyId={Company.CompanyId}");
        
        height = Style.GetHeight(productGroups.Count());
    }

    private async Task DeleteProductGroup(string productGroupId) {
        ProductGroup productGroup = await client.GetFromJsonAsync<ProductGroup>($"api/productgroup/{productGroupId}");
        if(await JsRuntime.InvokeAsync<bool>("confirm", $"Do you want to delete {productGroup.Name}?")){
                await client.DeleteAsync($"api/productgroup/{productGroupId}");
            }
        await OnInitializedAsync();
    }
}