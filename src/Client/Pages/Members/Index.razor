@page "/{companySlug}/members"
@using Models
@inject HttpClient client
@inject IJSRuntime JsRuntime
@inject Services.Style Style
@inject Services.CompanyFilter CompanyFilter


<h3>@companySlug | Members</h3>

<a href="@companySlug/members/add" class="btn btn-primary">Add Member</a>
<br />


@if(Members == null) {
    <p>Loading ...</p>
}
else if(Members.Length == 0) {
    <p>No members yet!</p>
}
else {



    <div class="row mb-3">
                <Card Title="Members" Count="@Members.Count().ToString()"/>
    </div>



    <div class="table-responsive shadow p-2 rounded bg-white">
    <table class="table table-striped table-sm">
        <thead>
            <tr>
                <th>Name</th>
                <th>Joined Date</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (Member member in Members)
            {
                
                <tr>
                    <td>@GetUserById(member.ServiceManagerUserId)</td>
                    <td>@member.CreatedOn</td>
                    <td>
                        <div class="btn-group">
                          <button type="button" class="btn btn-info btn-sm dropdown-toggle" data-toggle="dropdown" aria-expanded="false">
                            Action
                          </button>
                          <ul class="dropdown-menu" style="height: @height;">
                            <li><a class="dropdown-item disabled" href="">Details</a></li>
                            <li><hr class="dropdown-divider"></li>
                            <li><a class="dropdown-item" @onclick="@(() => DeleteMember(member.MemberId))">Delete</a></li>
                          </ul>
                        </div>
                    </td>
                </tr>
            }

        </tbody>
    </table>
    </div>
}


@code {
    [Parameter] public string companySlug { get; set; }
    private Member[] Members { get; set; }
    private Company Company { get; set; }
    private ServiceManagerUser ServiceManagerUser { get; set; }
    private ServiceManagerUser[] ServiceManagerUsers { get; set; } 
    private string height { get; set; }

    protected override async Task OnInitializedAsync() {

        Company = await client.GetFromJsonAsync<Company>($"api/company/s?slug={companySlug}");
        CompanyFilter.CompanyId = Company.CompanyId;
        CompanyFilter.Slug = Company.Slug;

        Members = await client.GetFromJsonAsync<Member[]>($"api/member?companyId={Company.CompanyId}");
        ServiceManagerUsers = await client.GetFromJsonAsync<ServiceManagerUser[]>($"api/user?companyId={Company.CompanyId}");

        height = Style.GetHeight(Members.Count());
    }

    private string GetUserById(string userId) {
        return ServiceManagerUsers.FirstOrDefault(s => s.Id == userId).UserName;
    }

    private async Task DeleteMember(string memberId) {
        Member member = await client.GetFromJsonAsync<Member>($"api/member/{memberId}");
        if(await JsRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to remove {GetUserById(member.MemberId)}?")) {
                await client.DeleteAsync($"api/member/{memberId}");
            }
        await OnInitializedAsync();
    }
}